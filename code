#include <SoftwareSerial.h>
#define SSID "samokhab" // router SSID
#define PASS "FCI_sala7_56" // router password
#define IP "184.106.153.149" // thingspeak.com IP

String GET = "GET /update?key=7Q4EN2ZRP7MU6YC9&field1="; // ThingSpeak channel write key
SoftwareSerial monitor(3, 2); //Serial communication to ESP8266 module (RX, TX)

//Variables
int inputpin1 =A0;
int inputpin2 =A1;
int inputpin3 =A2;
int inputpin4 =A3;
int inputpin5 =A4;
int inputpin6 =A5;

int bed1=0;
int bed2=0;
int bed3=0;
int bed4=0;
int bed5=0;
int bed6=0;
unsigned long duration;
unsigned long starttime;
unsigned long sampletime_ms = 300;
unsigned long delay_time = 300;


//setup
void setup()
{
  //start serial communications
  Serial.begin(9600);
  monitor.begin(9600);
  Serial.println("Initializing...");

  //configure Arduino pins
pinMode(inputpin1, INPUT);
pinMode(inputpin2, INPUT);
pinMode(inputpin3, INPUT);
pinMode(inputpin4, INPUT);
pinMode(inputpin5, INPUT);
pinMode(inputpin6, INPUT);
  


    //communication with wifi module
    monitor.flush();
    monitor.println("AT");
    delay(2000);
    
    if(monitor.find("OK")){
      Serial.println("Communication with ESP8266 module: OK");
    }
    else {
      Serial.println("ESP8266 module ERROR");
    }

  //connect wifi router  
 connectWiFi();{
     
  Serial.print("Sampling (");
  Serial.print(sampletime_ms/1000);
  Serial.println("s)...");
  
  //initialize timer
  starttime = millis();

}
}
void loop(){

bed6=digitalRead(inputpin1);
bed5=digitalRead(inputpin2);
bed1=digitalRead(inputpin3);
bed2=digitalRead(inputpin4);
bed3=digitalRead(inputpin5);
bed4=digitalRead(inputpin6);
if (bed1 >0)
{
Serial.println("the bed number 1 is free");
delay(500);
}
else 
{
Serial.println("the bed number 1 is busy");
delay(500);
}

if (bed2 >0)
{
Serial.println("the bed number 2 is free");
delay(500);
}
else 
{
Serial.println("the bed number 2 is busy");
delay(500);
}

if (bed3 >0)
{
Serial.println("the bed number 3 is free");
delay(500);
}
else 
{
Serial.println("the bed number 3 is busy");
delay(500);
}

if (bed4 >0)
{
Serial.println("the bed number 4 is free");
delay(500);
}
else 
{
Serial.println("the bed number 4 is busy");
delay(500);
}

if (bed5 >0)
{
Serial.println("the bed number 5 is free");
delay(500);
}
else 
{
Serial.println("the bed number 5 is busy");
delay(500);
}

if (bed6 >0)
{
Serial.println("the bed number 6 is free");
delay(500);
}
else 
{
Serial.println("the bed number 6 is busy");
delay(500);
}

    //convert sensor values to strings
String state1=String(bed1);                 
String state2=String(bed2);  
String state3=String(bed3); 
String state4=String(bed4); 
String state5=String(bed5); 
String state6=String(bed6); 
        
    //send data to ThingSpeak
    updateSensors(state1, state2, state3, state4, state5, state6);{

    //wait next sampling cycle
    Serial.print("Wait ");
    Serial.print(delay_time/1000);
    Serial.println("s for next sampling");
    Serial.println();
    delay(delay_time);
    
    //initialize new cycle
    Serial.println();
    Serial.print("Sampling (");
    Serial.print(sampletime_ms/1000);
    Serial.println("s)...");
    starttime = millis();
  }
}

//Send data to ThingSpeak
void updateSensors(String state1, String state2, String state3, String state4, String state5, String state6) {

  String cmd = "AT+CIPSTART=\"TCP\",\"";
  cmd += IP;
  cmd += "\",80";
  monitor.println(cmd);
  delay(200);
 
  cmd = GET;
  cmd += state1;
  cmd += "&field2=";
  cmd += state2;
  cmd += "&field3=";
  cmd += state3;
  cmd += "&field4=";
  cmd += state4;
  cmd += "&field5=";
  cmd += state5;
  cmd += "&field6=";
  cmd += state6;
  cmd += "&field7=";
  cmd += "\r\n";
  delay(100);
  int strsize = cmd.length();
  monitor.println("AT+CIPSEND=" + String(strsize));
  delay(200);
  
  monitor.print(cmd);
  if(monitor.find("OK")){
    Serial.println("Transmission completed with success");
  }else{
    Serial.println("Transmission failed!");
  }
}

void sendDebug(String cmd){
  Serial.print("SEND: ");
  Serial.println(cmd);
  monitor.println(cmd);
} 
 
boolean connectWiFi(){
  Serial.println("Connecting wi-fi...");
  String cmd ="AT+CWMODE=1";
  monitor.println(cmd);
  delay(200);
  monitor.flush(); //clear buffer
  cmd="AT+CWJAP=\"";
  cmd+=SSID;
  cmd+="\",\"";
  cmd+=PASS;
  cmd+="\"";
  monitor.println(cmd);
  delay(500);
  
  if(monitor.find("OK")){
    Serial.println("Connection succeeded!");
    return true;
  }else{
    Serial.println("Connection failed!");
    return false;
  }
  Serial.println();
}
